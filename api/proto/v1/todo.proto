syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/scys12/simple-grpc-go/api/proto/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "ToDo service";
		version: "1.0";
    contact: {
      name: "simple-grpc-go project";
      url: "https://github.com/scys12/simple-grpc-go";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
  key: "404";
  value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

message Todo {
  int64 id = 1;
  string title = 2;
  string description = 3;
  google.protobuf.Timestamp reminder = 4;
}

message CreateRequest {
  string apiV = 1;
  Todo todo = 2;
}

message CreateResponse{
  string apiV = 1;
  int64 id = 2;
}

message ReadRequest {
  string apiV = 1;
  int64 id = 2;
}

message ReadResponse {
  string apiV = 1;
  Todo todo = 2;
}

message UpdateRequest {
  string apiV = 1;
  Todo todo = 2;
}

message UpdateResponse {
  string apiV = 1;
  int64 updated = 2;
}

message DeleteRequest {
  string apiV = 1;
  int64 id = 2;
}

message DeleteResponse {
  string apiV = 1;
  int64 deleted = 2;
}

message ReadAllRequest {
  string apiV = 1;
}

message ReadAllResponse {
  string apiV = 1;
  repeated Todo todos = 2;
}

service TodoService {
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse){
        option (google.api.http) = {
            get: "/v1/todos"
        };
    }

    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/v1/todo"
            body: "*"
        };
    }

    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/todo/{id}"
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/todo/{todo.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/todo/{todo.id}"
                body: "*"
            }
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/todo/{id}"
        };
    }
}